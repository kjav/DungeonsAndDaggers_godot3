[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/frame_left.webp" type="Texture" id=1]
[ext_resource path="res://assets/frame_top.webp" type="Texture" id=2]
[ext_resource path="res://assets/frame_bottom.webp" type="Texture" id=3]
[ext_resource path="res://Hud/ClickableRegion.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "
extends Node2D
export(int, \"Potion\", \"Food\", \"Spell\") var type setget setType, getType

const InventoryItemDisplay = preload(\"res://Hud/InventoryItemTile.tscn\")
var eventMessageHolderNode
const initialTilePlacementPos = Vector2(616, 1638)
const borderSize = Vector2(10, 10)

func _ready():
	eventMessageHolderNode = GameData.hud.get_node(\"HudCanvasLayer/EventMessageHolder\")

func populateInventory():
	var selectedItems = getSelectedItems()
	
	var groupedSelectedItems = removeDuplicateItemsAndKeepCount(selectedItems)
	
	var lastNode = addItemNodes(groupedSelectedItems)
	
	setInventoryToFitItems(lastNode)

func getSelectedItems():
	match type:
		\"Potion\":
			return GameData.potions
		\"Food\":
			return GameData.foods
		\"Spell\":
			return GameData.spells

func removeDuplicateItemsAndKeepCount(selectedItems):
	var itemsWithoutDuplicates = []
	var itemNamesToIgnore = []
	
	for item in selectedItems:
		if not itemNamesToIgnore.has(item.item_name):
			var count = countWithItemName(selectedItems, item.item_name)
			
			if count > 1:
				itemNamesToIgnore.append(item.item_name)
				itemsWithoutDuplicates.append([lastItemWithName(selectedItems, item.item_name), count])
			else:
				itemsWithoutDuplicates.append([item, count])
	
	return itemsWithoutDuplicates

func countWithItemName(itemArray, name):
	var count = 0
	
	for item in itemArray:
		if item.item_name == name:
			count += 1
	
	return count

func lastItemWithName(itemArray, name):
	for i in range(itemArray.size()-1, 0, -1):
		if itemArray[i].item_name == name:
			return itemArray[i]

func addItemNodes(selectedItems):
	var lastNode
	
	for i in range(selectedItems.size()):
		var new_node = InventoryItemDisplay.instance()
		new_node.setInstance(selectedItems[i][0], selectedItems[i][1])    
		
		match type:
			\"Potion\":
				new_node.instance.connect(\"ItemUsed\", eventMessageHolderNode, \"_on_PotItem_used\")
			\"Food\":
				new_node.instance.connect(\"ItemUsed\", eventMessageHolderNode, \"_on_FoodItem_used\")
			\"Spell\":
				new_node.instance.connect(\"ItemUsed\", eventMessageHolderNode, \"_on_SpellItem_used\")
		
		new_node.position = initialTilePlacementPos - Vector2(0, i * new_node.get_node(\"InventoryTile\").get_size().y *new_node.get_node(\"InventoryTile\").get_scale().y)
		new_node.set_draw_behind_parent(true)
		
		add_child(new_node)
		lastNode = new_node
	
	return lastNode

func setInventoryToFitItems(lastNode):
	if lastNode != null:
		var lastNodeSize = lastNode.get_node(\"InventoryTile\").get_size() * lastNode.get_node(\"InventoryTile\").get_scale()
		var lastNodePosition = lastNode.get_position()
		
		var inventorySize = Vector2(lastNodeSize.x + 2 * borderSize.x, initialTilePlacementPos.y - lastNodePosition.y + 2 * borderSize.y + lastNodeSize.y)
		var inventoryPosition = lastNodePosition - borderSize
		
		get_node(\"InventoryWrapperTop\").set_size(Vector2(inventorySize.x, get_node(\"InventoryWrapperTop\").get_size().y))
		get_node(\"InventoryWrapperTop\").set_position(inventoryPosition)
		
		get_node(\"InventoryWrapperBottom\").set_size(Vector2(inventorySize.x, get_node(\"InventoryWrapperBottom\").get_size().y))
		get_node(\"InventoryWrapperBottom\").set_position(initialTilePlacementPos + Vector2(-1.75 * borderSize.x, borderSize.y + lastNodeSize.y - get_node(\"InventoryWrapperBottom\").get_size().y))
		
		get_node(\"InventoryWrapperLeft\").set_size(Vector2(get_node(\"InventoryWrapperLeft\").get_size().x, inventorySize.y - get_node(\"InventoryWrapperBottom\").get_size().y - get_node(\"InventoryWrapperTop\").get_size().y))
		get_node(\"InventoryWrapperLeft\").set_position(inventoryPosition + Vector2(1, get_node(\"InventoryWrapperTop\").get_size().y))
		
		get_node(\"InventoryClickableRegion\").set_size(inventorySize)
		get_node(\"InventoryClickableRegion\").set_position(inventoryPosition)
	else:
		var pluralised
		print(type)
		if type.to_lower() == \"food\":
			pluralised = type.to_lower()
		else:
			pluralised = type.to_lower() + \"s\"
			
		eventMessageHolderNode.addMessage(\"You have no \" + pluralised)
		
		get_node(\"Invent oryWrapperTop\").set_size(Vector2(0,0))
		get_node(\"InventoryWrapperBottom\").set_size(Vector2(0,0))
		get_node(\"InventoryWrapperLeft\").set_size(Vector2(0,0))
		get_node(\"InventoryClickableRegion\").set_size(Vector2(0,0))
		
		hideMenu(\"no items\")

func setType(newType):
	if typeof(newType) == TYPE_STRING:
		type = newType

func selectItem(item):
	hideMenu(\"item used\");

func hideMenu(event):
	#untested
	#if event != \"item used\":
		#Audio.playSoundEffect(\"Inventory_Close\", false)
	get_tree().get_current_scene().get_node(\"HudNode\").inventoryOpen = false
	self.queue_free()
	self.hide()

func getType():
	return type"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

[node name="InventoryWrapperLeft" type="TextureRect" parent="."]
margin_left = 629.0
margin_top = 1247.0
margin_right = 645.0
margin_bottom = 1580.0
texture = ExtResource( 1 )
expand = true
stretch_mode = 2

[node name="InventoryWrapperTop" type="TextureRect" parent="."]
margin_left = 628.0
margin_top = 1224.0
margin_right = 1083.0
margin_bottom = 1247.0
texture = ExtResource( 2 )
expand = true

[node name="InventoryWrapperBottom" type="TextureRect" parent="."]
margin_left = 599.0
margin_top = 1563.0
margin_right = 1082.0
margin_bottom = 1652.0
texture = ExtResource( 3 )
expand = true

[node name="InventoryClickableRegion" parent="." instance=ExtResource( 4 )]
modulate = Color( 1, 1, 1, 0 )
margin_left = 668.011
margin_top = 1245.13
margin_right = 1144.01
margin_bottom = 1840.13
[connection signal="clicked_outside" from="InventoryClickableRegion" to="." method="hideMenu"]
